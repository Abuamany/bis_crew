import os
import streamlit as st
from crewai import Crew, Process, Agent, Task
from langchain_core.callbacks import BaseCallbackHandler
from langchain_openai import ChatOpenAI
from typing import Any, Dict

# Streamlit UI setup
st.title("ðŸ’¬ CrewAI Business Consultant") 

# Logo
image_url = "https://cdn-icons-png.flaticon.com/512/1998/1998614.png"
st.sidebar.image(image_url, caption="", use_column_width=True)
st.sidebar.write("This AI Business Consultant is built using AI Multi-Agent system. It can give you business insights, statistical analysis and up-to-date information about any business topic. This AI Multi-Agent Business Consultant delivers knowledge on demand and for FREE!")

# Input OpenAI API key in the sidebar
api_key = st.sidebar.text_input("Enter your OpenAI API key", type="password")

# Initialize the OpenAI API key in the environment
if api_key:
    os.environ["OPENAI_API_KEY"] = api_key

# Check if the API key is set
if "OPENAI_API_KEY" in os.environ and os.environ["OPENAI_API_KEY"]:
    # Initialize the OpenAI model for use with agents
    openai = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.5)

    class CustomHandler(BaseCallbackHandler):
        """A custom handler for logging interactions within the process chain."""

        def __init__(self, agent_name: str) -> None:
            super().__init__()
            self.agent_name = agent_name

        def on_chain_start(self, serialized: Dict[str, Any], outputs: Dict[str, Any], **kwargs: Any) -> None:
            """Log the start of a chain with user input."""
            st.session_state.messages.append({"role": "assistant", "content": outputs['input']})
            st.chat_message("assistant").write(outputs['input'])

        def on_agent_action(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any) -> None:
            """Log the action taken by an agent during a chain run."""
            st.session_state.messages.append({"role": "assistant", "content": inputs['input']})
            st.chat_message("assistant").write(inputs['input'])

        def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:
            """Log the end of a chain with the output generated by an agent."""
            st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
            st.chat_message(self.agent_name).write(outputs['output'])

    # Define agents with their specific roles and goals
    planner = Agent(
        role='Business Consultant',
        backstory='''You are the Business Consultant. 
                    You're working on providing Insights about : {prompt} 
                    You collect information that help them take decisions 
                    Your work is the basis for the Business Writer to deliver good insights''',
        goal='Plan engaging and factually accurate content about the : {prompt}',
        llm=openai,
        callbacks=[CustomHandler("Business Consultant")],
    )

    writer = Agent(
        role='Business Writer',
        backstory='''You are a Business Writer responsible for writing clean, efficient.
                    You're writing a Business Insights document 
                    about the topic: {prompt}. 
                    You base your design on the work of the Business Consultant, who provides an outline 
                    and relevant context about the : {prompt}. 
                    and also the data analyst who will provide you with necessary analysis about the : {prompt} 
                    You follow the main objectives and 
                    direction of the outline, 
                    as provided by the Business Consultant. 
                    You also provide objective and impartial insights "
                    and back them up with information 
                    provided by the Business Consultant.''',
        goal='Write insightful and factually accurate insights about the topic: {prompt}',
        llm=openai,
        callbacks=[CustomHandler("Business Writer")],
    )

    analyst = Agent(
        role='Data Analyst',
        backstory='''You're using your strong analytical skills to provide a comprehensive statistical analysis with numbers about the topic: {prompt}. 
                    You base your design on the work of the Business Consultant, who provides an outline and relevant context about the : {prompt}. 
                    You follow the main objectives and direction of the outline, as provided by the Business Consultant. 
                    You also provide comprehensive statistical analysis with numbers to the Business Writer and back them up with information provided by the Business Consultant.''',
        goal='Perform Comprehensive Statistical Analysis on the topic: {prompt}''',
        llm=openai,
        callbacks=[CustomHandler("Data Analyst")],
    )

    # Initialize the message log in session state if not already present
    if "messages" not in st.session_state:
        st.session_state["messages"] = [{"role": "assistant", "content": "Enter The Required Business Search Area"}]

    # Display existing messages
    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])

    # Handle user input
    if prompt := st.chat_input():
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.chat_message("user").write(prompt)

        # Define tasks for each agent
        task_plan = Task(
            description=f'''You're working on providing Insights about : {prompt} 
                    You collect information that help them take decisions 
                    Your work is the basis for the Business Writer to deliver good insights''',
            agent=planner,
            expected_output="Plan engaging and factually accurate content about the : {prompt}",
        )

        task_writer = Task(
            description='''You are a Business Writer responsible for writing clean, efficient.
                    You're writing a Business Insights document 
                    about the topic: {prompt}. 
                    You base your design on the work of the Business Consultant, who provides an outline 
                    and relevant context about the : {prompt}. 
                    and also the data analyst who will provide you with necessary analysis about the : {prompt} 
                    You follow the main objectives and 
                    direction of the outline, 
                    as provided by the Business Consultant. 
                    You also provide objective and impartial insights "
                    and back them up with information 
                    provided by the Business Consultant.''',
            agent=writer,
            expected_output="Well-written and structured code that is feature complete, simple, efficient and adheres to object oriented principles.",
        )

        task_analyst = Task(
            description='''You're using your strong analytical skills to provide a comprehensive statistical analysis with numbers about the topic: {prompt}. 
                    You base your design on the work of the Business Consultant, who provides an outline and relevant context about the : {prompt}. 
                    You follow the main objectives and direction of the outline, as provided by the Business Consultant. 
                    You also provide comprehensive statistical analysis with numbers to the Business Writer and back them up with information provided by the Business Consultant.''',
            agent=analyst,
            expected_output="Perform Comprehensive Statistical Analysis on the topic: {topic} ",
        )

        # Set up the crew and process tasks hierarchically
        project_crew = Crew(
            tasks=[task_plan, task_writer, task_analyst],
            agents=[planner, writer, analyst],
            process=Process.hierarchical,
            manager_llm=openai,
            manager_callbacks=[CustomHandler("Crew Manager")]
        )
        final = project_crew.kickoff()

        # Display the final result
        result = f"## Here is the Final Result \n\n {final}"
        st.session_state.messages.append({"role": "assistant", "content": result})
        st.chat_message("assistant").write(result)

else:
    st.sidebar.warning("Please enter your OpenAI API key to proceed.")
